grammar Expression
  #everything must match this
  rule top_expression
    e2:assignment
    {
      def eval
        e2.eval
      end
    } /
    e3:( array / seq / weak_num )
    {
      def eval
        result = e3.eval
        imm = "v#{$context.line+=1}"
        $context.var imm, result
        pprint result, imm
        result
      end
    } /
    e1:id
    {
      def eval
        result = e1.eval
        imm = e1.text_value
        pprint result, imm
        result
      end
    }
  end

  rule expression
    e:assignment
    {
      def eval
        e2.eval
      end
    } /
    ws e:( array / seq / weak_num ) ws {
      def eval
        e.eval
      end
    } /
    e:function {
      def eval
        e
      end
    }
  end

  rule function
    ws '{' id e2:(',' id)* ':' ws expression ws '}' ws {
      def eval args
        params = [id.text_value.strip]
        for e in e2.elements
          params << e.elements[1].text_value.strip
        end
        if params.length != args.length
          raise Exception.new "Function #{id} expects #{params.length} arguments, #{args.length} given"
        else
          $context = Context.new $context
          params.zip(args).each {|param, arg|
            $context.var param, arg
          }
          result = expression.eval
          $context = $context.parent
          result
        end
      end

      def print
        str = "func("+id.text_value.strip
        for e in e2.elements
          str+= "," + e.elements[1].text_value.strip
        end
        str+= ")"
      end
    }
  end
      
  rule assignment
    e1:id '=' e2:expression
    {
      def eval
        val = e2.eval
        imm = e1.text_value.strip
        $context.var imm, val
        pprint val, imm
      end
    }
  end
  
  rule array
    '[]' {
      def eval
        []
      end
    } /
    '[' e1:expression en:(',' expression )* ']'
    {
      def eval
        result = [e1.eval]
        for e in en.elements
          result << e.elements[1].eval
        end
        result
      end
    }
  end

  rule weak_num
    plus / minus / tight_num
  end

  rule plus
    e1:tight_num '+' e2:weak_num {
      def eval
        e1.eval + e2.eval
      end
    }
  end

  rule minus
    e1:tight_num '-' e2:weak_num {
      def eval
        e1.eval - e2.eval
      end
    }
    /
    '-' e:tight_num {
      def eval
        -e.eval
      end
    }
  end

  rule tight_num
    mul / div / mod / very_tight_num
  end
  
  rule mul
    e1:val '*' e2:tight_num {
      def eval
        e1.eval * e2.eval
      end
    }
  end

  rule mod
    e1:val '%' e2:tight_num {
      def eval
        e1.eval % e2.eval
      end
    }
  end

  rule div
    e1:val '/' e2:tight_num {
      def eval
        v1 = e1.eval
        v2 = e2.eval
        if (v1 % v2 != 0 or v1.is_a? Float or v2.is_a? Float)
          v1.fdiv v2
        else
          v1 / v2
        end
      end
    }
  end

  rule very_tight_num
    pow / shl / shr / val
  end

  rule pow
    val '^' very_tight_num {
      def eval
        val.eval ** very_tight_num.eval
      end
    }
  end

  rule shl
    e1:val '<<' e2:val {
      def eval
        e1.eval << e2.eval
      end
    }
  end

  rule shr
    e1:val '>>' e2:val {
      def eval
        e1.eval >> e2.eval
      end
    }
  end
  
  rule seq
    e1:val '..' e2:val {
      def eval
        e1.eval .. e2.eval
      end
    }
  end

  rule val
    ws e:( index / func_apply / id / number / brackets ) ws {
      def eval
        e.eval
      end
    }
  end

  rule index
    id '[' val ']' {
      def eval
        id.eval[val.eval]
      end
    }
  end

  rule func_apply
    id '()' {
      def eval
        ($context.var id.text_value.strip).eval []
      end
    } /
    id '(' e:expression en:(',' expression)* ')' {
      def eval
        f = $context.var id.text_value.strip
        args=[]
        if e != nil
          args << e.eval
          en.elements.each {|e| args << e.elements[1].eval }
        end
        f.eval args
      end
    } /
    ws '{' ws e1:expression ws '|' ws e2:id '=' e3:expression e4:(',' id '=' expression)* '}' ws {
      def eval
        args = [e2.text_value.strip]
        vals = [e3.eval.to_a]
        for a in e4.elements
          args << a.elements[1].text_value.strip
          vals << a.elements[3].eval.to_a
        end

        result = []
        
        valcombs = vals[0].product(*vals[1..-1])
        valcombs.each {|valset|
          $context = Context.new $context
          valset.each_index {|i|
            $context.var args[i], valset[i]
          }
          result << e1.eval
          $context = $context.parent
        }
        result
      end
    }
  end
  
  rule brackets
    '(' weak_num ')' {
      def eval
        weak_num.eval
      end
    }
  end
  
  rule id
    ws e:([a-zA-Z] [a-zA-Z0-9]*) ws {
      def eval
        $context.var e.text_value
      end
    } /
    ws '`' ws {
      def eval
        if $context.last != nil
           $context.last
        else
           raise Exception.new "There is no last expression"
        end
      end
    }
  end
  
  rule number
    hex / bin / oct / dec
  end

  rule dec
    e:(([1-9]+ [0-9]* / '0') ('.' [0-9]+)?) {
      def eval
        if e.text_value.include? '.'
          e.text_value.to_f
        else
          e.text_value.to_i
        end
      end
    }
  end
  
  rule hex
    e:(( '0x' [0-F]+ ) / ( [0-F]+ 'h')) {
      def eval
        e.text_value.to_i(16)
      end
    }
  end
  
  rule bin
    e:('0b' [01]+)  {
      def eval
        e.text_value.to_i(2)
      end
    }
  end
  
  rule oct
    e:('0' [0-7]+) {
      def eval
        e.text_value.to_i(8)
      end
    }
  end

  rule ws
    [ \t]*
  end
end
