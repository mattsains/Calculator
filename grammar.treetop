grammar Expression
  #everything must match this
  rule expression
    e:( array / weak_num / seq )
    {
      def eval
        e.eval
      end
    }
  end

  rule array
    '[' e1:expression (',' en:expression )* ']'
    {
      def eval
        for e in elements.select {|e| e.nonterminal?}
          p e.en
          p e.en.eval
        end
      end
    }
  end

  rule weak_num
    plus / minus / tight_num
  end

  rule plus
    e1:tight_num '+' e2:weak_num {
      def eval
        e1.eval + e2.eval
      end
    }
  end

  rule minus
    e1:tight_num '-' e2:weak_num {
      def eval
        e1.eval - e2.eval
      end
    }
    /
    '-' e:tight_num {
      def eval
        -e.eval
      end
    }
  end

  rule tight_num
    mul / div / val
  end
  
  rule mul
    e1:val '*' e2:tight_num {
      def eval
        e1.eval * e2.eval
      end
    }
  end

  rule div
    e1:val '/' e2:tight_num {
      def eval
        e1.eval / e2.eval
      end
    }
  end

  rule seq
    ( e1:val '..' e2:val ) {
      def eval
        e1.eval .. e2.eval
      end
    }
  end

  rule val
    id / number / brackets
  end

  rule brackets
    '(' weak_num ')' {
      def eval
        weak_num.eval
      end
    }
  end
  
  rule id
    [a-zA-Z] [a-zA-Z0-9]*
  end
  
  rule number
    hex / dec / bin / oct
  end

  rule dec
    e:(([1-9]+ [0-9]* / '0') ('.' [0-9]+)?) {
      def eval
        if e.text_value.include? '.'
          e.text_value.to_f
        else
          e.text_value.to_i
        end
      end
    }
  end
  
  rule hex
    e:(( '0x' [0-F]+ ) / ( [0-F]+ 'h')) {
      def eval
        e.text_value.to_i
      end
    }
  end
  
  rule bin
    e:( '0b' [01]+ ) {
      def eval
        e.text_value.to_i
      end
    }
  end
  
  rule oct
    e:('0' [0-7]+) {
      def eval
        e.text_value.to_i
      end
    }
  end
end
